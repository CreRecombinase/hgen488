// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// mat_mult
NumericMatrix mat_mult(NumericMatrix A, NumericMatrix B);
RcppExport SEXP hgen488_mat_mult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult_eigen
Eigen::MatrixXd mat_mult_eigen(const Eigen::MatrixXd& A, const Eigen::MatrixXd& B);
RcppExport SEXP hgen488_mat_mult_eigen(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult_eigen(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rep_mat_mult_eigen
Eigen::MatrixXd rep_mat_mult_eigen(const Eigen::MatrixXd& A, const Eigen::MatrixXd& B, int reps);
RcppExport SEXP hgen488_rep_mat_mult_eigen(SEXP ASEXP, SEXP BSEXP, SEXP repsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_mat_mult_eigen(A, B, reps));
    return rcpp_result_gen;
END_RCPP
}
// GramSchmidt
Rcpp::List GramSchmidt(const Eigen::MatrixXd& X);
RcppExport SEXP hgen488_GramSchmidt(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(GramSchmidt(X));
    return rcpp_result_gen;
END_RCPP
}
// GramSchmidtQR
Rcpp::List GramSchmidtQR(const Eigen::MatrixXd& X);
RcppExport SEXP hgen488_GramSchmidtQR(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(GramSchmidtQR(X));
    return rcpp_result_gen;
END_RCPP
}
// QR_eigen
Rcpp::List QR_eigen(const Eigen::MatrixXd& X);
RcppExport SEXP hgen488_QR_eigen(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(QR_eigen(X));
    return rcpp_result_gen;
END_RCPP
}
// simple_hash_fn
void simple_hash_fn(Rcpp::IntegerVector keys, int num_slots);
RcppExport SEXP hgen488_simple_hash_fn(SEXP keysSEXP, SEXP num_slotsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< int >::type num_slots(num_slotsSEXP);
    simple_hash_fn(keys, num_slots);
    return R_NilValue;
END_RCPP
}
// two_stacks_fn
void two_stacks_fn(const Rcpp::IntegerVector keys, const Rcpp::LogicalVector pushStackA, const Rcpp::LogicalVector popStackA);
RcppExport SEXP hgen488_two_stacks_fn(SEXP keysSEXP, SEXP pushStackASEXP, SEXP popStackASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector >::type pushStackA(pushStackASEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector >::type popStackA(popStackASEXP);
    two_stacks_fn(keys, pushStackA, popStackA);
    return R_NilValue;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP hgen488_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP hgen488_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP hgen488_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP hgen488_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
